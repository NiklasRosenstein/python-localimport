{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"localimport allows you to import Python modules in an isolated environment, preserving the global importer state. Features Emulates an isolated environment for Python module imports Evaluates *.pth files Compatible with pkg_resources namespaces Mocks pkgutil.extend_path() to support zipped Python eggs Example Given your Python script, application or plugin comes with a directory that contains modules for import, you can use localimport to keep the global importer state clean. app.py res/modules/ some_package/ __init__.py # app.py with localimport ( 'res/modules' ) as _importer : import some_package assert 'some_package' not in sys . modules Important : You must keep the reference to the localimport object alive, especially if you use from xx import yy imports. Usage In most cases it would not make sense to use localimport as a Python module when you actually want to import Python modules since the import of the localimport module itself would not be isolated. The solution is to use the localimport source code directly in your application code. Usually you will use a minified version. Pre-minified versions of localimport can be found in this Gist . Of course you can minify the code by yourself, for example using the nr command-line tools. nr py.blob localimport.py -cme localimport > localimport-gzb64-w80.py Depending on your application, you may want to use a bootstrapper entry point. # @@@ minified localimport here @@@ with localimport ( '.' ) as _importer : from my_application_package.__main__ import main main () API localimport(path, parent_dir=None, do_eggs=True, do_pth=True, do_autodisable=True) A context manager that creates an isolated environment for importing Python modules. Once the context manager exits, the previous global state is restored. Note that the context can be entered multiple times, but it is not recommended generally as the only case where you would want to do that is inside a piece of code that gets executed delayed (eg. a function) which imports a module, and building the isolated environment and restoring to the previous state has some performance impacts. Also note that the context will only remove packages on exit that have actually been imported from the list of paths specified in the path argument, but not modules from the standard library, for example. Parameters path \u2013 A list of paths that are added to sys.path inside the context manager. Can also be a single string. If one or more relative paths are passed, they are treated relative to the parent_dir argument. parent_dir \u2013 A path that is concatenated with relative paths passed to the path argument. If this argument is omitted or None , it will default to the parent directory of the file that called the localimport() constructor (using sys._getframe(1).f_globals['__file__'] ). do_eggs \u2013 A boolean that indicates whether .egg files or directories found in the additional paths are added to sys.path . do_pth \u2013 A boolean that indicates whether .pth files found in the additional paths will be evaluated. do_autodisable \u2013 A boolean that indicates that localimport.autodisable() should be called automatically be the context manager. Changed in 1.7 Added do_autodisable parameter. localimport.autodisable() Uses localimport.discover() to automatically detect modules that could be imported from the paths in the importer context and calls #disable on all of them. New in 1.7 localimport.disable(modules) Disable one or more modules by moving them from the global module cache ( sys.modules ) to a dictionary of temporary hidden modules in the isolated environment. Once the localimport() context manager exits, these modules will be restored. Does nothing when a module does not exist. Parameters modules \u2013 A list of module names or a single module name string. localimport.discover() A shorthand for pkgutil.walk_packages(importer.path) . New in 1.7 Copyright \u00a9 2018 Niklas Rosenstein","title":"Home"},{"location":"#features","text":"Emulates an isolated environment for Python module imports Evaluates *.pth files Compatible with pkg_resources namespaces Mocks pkgutil.extend_path() to support zipped Python eggs","title":"Features"},{"location":"#example","text":"Given your Python script, application or plugin comes with a directory that contains modules for import, you can use localimport to keep the global importer state clean. app.py res/modules/ some_package/ __init__.py # app.py with localimport ( 'res/modules' ) as _importer : import some_package assert 'some_package' not in sys . modules Important : You must keep the reference to the localimport object alive, especially if you use from xx import yy imports.","title":"Example"},{"location":"#usage","text":"In most cases it would not make sense to use localimport as a Python module when you actually want to import Python modules since the import of the localimport module itself would not be isolated. The solution is to use the localimport source code directly in your application code. Usually you will use a minified version. Pre-minified versions of localimport can be found in this Gist . Of course you can minify the code by yourself, for example using the nr command-line tools. nr py.blob localimport.py -cme localimport > localimport-gzb64-w80.py Depending on your application, you may want to use a bootstrapper entry point. # @@@ minified localimport here @@@ with localimport ( '.' ) as _importer : from my_application_package.__main__ import main main ()","title":"Usage"},{"location":"#api","text":"","title":"API"},{"location":"#localimportpath-parent_dirnone-do_eggstrue-do_pthtrue-do_autodisabletrue","text":"A context manager that creates an isolated environment for importing Python modules. Once the context manager exits, the previous global state is restored. Note that the context can be entered multiple times, but it is not recommended generally as the only case where you would want to do that is inside a piece of code that gets executed delayed (eg. a function) which imports a module, and building the isolated environment and restoring to the previous state has some performance impacts. Also note that the context will only remove packages on exit that have actually been imported from the list of paths specified in the path argument, but not modules from the standard library, for example. Parameters path \u2013 A list of paths that are added to sys.path inside the context manager. Can also be a single string. If one or more relative paths are passed, they are treated relative to the parent_dir argument. parent_dir \u2013 A path that is concatenated with relative paths passed to the path argument. If this argument is omitted or None , it will default to the parent directory of the file that called the localimport() constructor (using sys._getframe(1).f_globals['__file__'] ). do_eggs \u2013 A boolean that indicates whether .egg files or directories found in the additional paths are added to sys.path . do_pth \u2013 A boolean that indicates whether .pth files found in the additional paths will be evaluated. do_autodisable \u2013 A boolean that indicates that localimport.autodisable() should be called automatically be the context manager. Changed in 1.7 Added do_autodisable parameter.","title":"localimport(path, parent_dir=None, do_eggs=True, do_pth=True, do_autodisable=True)"},{"location":"#localimportautodisable","text":"Uses localimport.discover() to automatically detect modules that could be imported from the paths in the importer context and calls #disable on all of them. New in 1.7","title":"localimport.autodisable()"},{"location":"#localimportdisablemodules","text":"Disable one or more modules by moving them from the global module cache ( sys.modules ) to a dictionary of temporary hidden modules in the isolated environment. Once the localimport() context manager exits, these modules will be restored. Does nothing when a module does not exist. Parameters modules \u2013 A list of module names or a single module name string.","title":"localimport.disable(modules)"},{"location":"#localimportdiscover","text":"A shorthand for pkgutil.walk_packages(importer.path) . New in 1.7 Copyright \u00a9 2018 Niklas Rosenstein","title":"localimport.discover()"},{"location":"changelog/","text":"Changelog 1.7.4 (2022-02-23) Type Description PR Issues Author Refactor modernize codebase, require Python 3.6 or newer @NiklasRosenstein 1.7.3 .pth files are now evaluated when the localimport() constructor is called. Import statements in these files will still only be evaluated inside the context manager. 1.7.2 localimport.discover() now uses pkgutil.iter_modules() rather than pkgutil.walk_packages() : We only need to know the top-level package/module names and walk_packages() will cause actual packages to be imported in order to find submodules. 1.7.1 Fix localimport.autodisable() for Python 2 (where pkgutil.walk_packages() yields tuples instead of namedtuples). 1.7.0 Add localimport(do_autodisable) parameter which defaults to True (Note: different semantics apply) Add localimport.discover() Add localimport.autodisable() 1.6.1 Update setup.py to adjust README.rst for PyPI v1.6.0 fix #19 -- read README.rst as UTF-8 in setup.py fix issue when the current working directory is used as one of the localimport paths move non-member functions to global scope, out of the localimport class add __author__ and version ` to global scope v1.5.2 fix #17 where sys.modules changed size during iteration in localimport.__enter__() (Python 3) v1.5.1 add Python 3 compatibility v1.5 add setup.py add make_min and make_b64 commands to setup.py fix possible error when localimport(parent_dir) parameter is not specified and the __file__ of the Python module that uses localimport is in the current working directory v1.4.16 fix possible KeyError when restoring namespace module paths renamed _localimport class to localimport localimport(parent_dir) parameter is now determined dynamically using sys._getframe() support for [py-require][require] v1.4.14 Mockup pkg_resources.declare_namespace() , making it call pkgutil.extend_path() afterwards to ensure we find all available namespace paths v1.4.13 fixed possible KeyError and AttributeError when using the _localimport.disable() method v1.4.12 Removed auto discovering of modules importable from the local site Add _localimport.disable() method v1.4.11 Fixed a bug where re-using the _localimport context added local modules back to sys.modules but removed them immediately (#15) v1.4.10 Fix #13, _extend_path() now keeps order of the paths Updat class docstrings Add do_eggs and do_pth parameters to the constructor Fix #12, add _discover() method and automatic disabling of modules that could conflict with modules from the _localimport site v1.4.9 Fix #11, remove None -entries of namespace packages in sys.modules _localimport._extend_path() is is now less tolerant about extending the namespace path and only does so when a __init__.{py,pyc,pyo} file exists in the parsed directory v1.4.8 Now checks any path for being a zipfile rather than just .egg files","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#174-2022-02-23","text":"Type Description PR Issues Author Refactor modernize codebase, require Python 3.6 or newer @NiklasRosenstein","title":"1.7.4 (2022-02-23)"},{"location":"changelog/#173","text":".pth files are now evaluated when the localimport() constructor is called. Import statements in these files will still only be evaluated inside the context manager.","title":"1.7.3"},{"location":"changelog/#172","text":"localimport.discover() now uses pkgutil.iter_modules() rather than pkgutil.walk_packages() : We only need to know the top-level package/module names and walk_packages() will cause actual packages to be imported in order to find submodules.","title":"1.7.2"},{"location":"changelog/#171","text":"Fix localimport.autodisable() for Python 2 (where pkgutil.walk_packages() yields tuples instead of namedtuples).","title":"1.7.1"},{"location":"changelog/#170","text":"Add localimport(do_autodisable) parameter which defaults to True (Note: different semantics apply) Add localimport.discover() Add localimport.autodisable()","title":"1.7.0"},{"location":"changelog/#161","text":"Update setup.py to adjust README.rst for PyPI","title":"1.6.1"},{"location":"changelog/#v160","text":"fix #19 -- read README.rst as UTF-8 in setup.py fix issue when the current working directory is used as one of the localimport paths move non-member functions to global scope, out of the localimport class add __author__ and version ` to global scope","title":"v1.6.0"},{"location":"changelog/#v152","text":"fix #17 where sys.modules changed size during iteration in localimport.__enter__() (Python 3)","title":"v1.5.2"},{"location":"changelog/#v151","text":"add Python 3 compatibility","title":"v1.5.1"},{"location":"changelog/#v15","text":"add setup.py add make_min and make_b64 commands to setup.py fix possible error when localimport(parent_dir) parameter is not specified and the __file__ of the Python module that uses localimport is in the current working directory","title":"v1.5"},{"location":"changelog/#v1416","text":"fix possible KeyError when restoring namespace module paths renamed _localimport class to localimport localimport(parent_dir) parameter is now determined dynamically using sys._getframe() support for [py-require][require]","title":"v1.4.16"},{"location":"changelog/#v1414","text":"Mockup pkg_resources.declare_namespace() , making it call pkgutil.extend_path() afterwards to ensure we find all available namespace paths","title":"v1.4.14"},{"location":"changelog/#v1413","text":"fixed possible KeyError and AttributeError when using the _localimport.disable() method","title":"v1.4.13"},{"location":"changelog/#v1412","text":"Removed auto discovering of modules importable from the local site Add _localimport.disable() method","title":"v1.4.12"},{"location":"changelog/#v1411","text":"Fixed a bug where re-using the _localimport context added local modules back to sys.modules but removed them immediately (#15)","title":"v1.4.11"},{"location":"changelog/#v1410","text":"Fix #13, _extend_path() now keeps order of the paths Updat class docstrings Add do_eggs and do_pth parameters to the constructor Fix #12, add _discover() method and automatic disabling of modules that could conflict with modules from the _localimport site","title":"v1.4.10"},{"location":"changelog/#v149","text":"Fix #11, remove None -entries of namespace packages in sys.modules _localimport._extend_path() is is now less tolerant about extending the namespace path and only does so when a __init__.{py,pyc,pyo} file exists in the parsed directory","title":"v1.4.9"},{"location":"changelog/#v148","text":"Now checks any path for being a zipfile rather than just .egg files","title":"v1.4.8"}]}